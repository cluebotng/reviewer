# Generated by Django 5.2.4 on 2025-07-25 16:11

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Edit",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.BooleanField(default=False)),
                ("status", models.IntegerField(choices=[(0, "Pending"), (1, "Partial"), (2, "Done")], default=0)),
                (
                    "classification",
                    models.IntegerField(choices=[(0, "Vandalism"), (1, "Constructive"), (2, "Skipped")], null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EditGroup",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, unique=True)),
                ("weight", models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="email address")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("is_reviewer", models.BooleanField(default=False)),
                ("is_admin", models.BooleanField(default=False)),
                ("historical_edit_count", models.IntegerField(default=0)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Classification",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "classification",
                    models.IntegerField(choices=[(0, "Vandalism"), (1, "Constructive"), (2, "Skipped")]),
                ),
                ("comment", models.TextField(default=None, null=True)),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                (
                    "edit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="user_classification",
                        to="cbng_reviewer.edit",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="edit",
            name="groups",
            field=models.ManyToManyField(to="cbng_reviewer.editgroup"),
        ),
        migrations.CreateModel(
            name="Revision",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("type", models.IntegerField(choices=[(0, "current"), (1, "previous")])),
                ("minor", models.BooleanField()),
                ("timestamp", models.IntegerField()),
                ("text", models.BinaryField()),
                ("edit", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="cbng_reviewer.edit")),
            ],
        ),
        migrations.CreateModel(
            name="TrainingData",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("timestamp", models.IntegerField()),
                ("comment", models.CharField(max_length=255)),
                ("user", models.CharField(max_length=255)),
                ("user_edit_count", models.IntegerField()),
                ("user_distinct_pages", models.IntegerField()),
                ("user_warns", models.IntegerField()),
                ("user_reg_time", models.IntegerField()),
                ("prev_user", models.CharField(max_length=255, null=True)),
                ("page_title", models.CharField(max_length=255)),
                ("page_namespace", models.IntegerField()),
                ("page_created_time", models.IntegerField()),
                ("page_creator", models.CharField(max_length=255)),
                ("page_num_recent_edits", models.IntegerField()),
                ("page_num_recent_reverts", models.IntegerField()),
                ("edit", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="cbng_reviewer.edit")),
            ],
        ),
    ]
