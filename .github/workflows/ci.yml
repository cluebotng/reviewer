name: CI
on: { pull_request: { } }
concurrency:
  group: ${{ github.head_ref || github.ref }}
  cancel-in-progress: true
permissions:
  checks: write
  pull-requests: write
  packages: write
jobs:
  setup-build:
    runs-on: ubuntu-latest
    outputs:
      tox_lint_envs: ${{ steps.list_envs.outputs.tox_lint_envs }}
      tox_test_envs: ${{ steps.list_envs.outputs.tox_test_envs }}
    steps:
      - uses: actions/checkout@v5

      - uses: ./.github/actions/setup-python-environment
        with:
          install_dependencies: false

      - id: list_envs
        run: |
          tox_lint_envs=$(
            tox --listenvs | \
            grep -Ev '^test-' | \
            jq -Rnc '[inputs | sub("\\.yml$"; "")]'
          )
          echo "tox_lint_envs=${tox_lint_envs}" >> $GITHUB_OUTPUT

          tox_test_envs=$(
            tox --listenvs | \
            grep -E '^test-' | \
            sed 's/^test-//' | \
            jq -Rnc '[inputs | sub("\\.yml$"; "")]'
          )
          echo "tox_test_envs=${tox_test_envs}" >> $GITHUB_OUTPUT

  execute-lint:
    runs-on: ubuntu-latest
    needs: [setup-build]
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(needs.setup-build.outputs.tox_lint_envs) }}
    continue-on-error: true
    steps:
      - uses: actions/checkout@v5

      - uses: ./.github/actions/setup-python-environment

      - name: Run tox target
        run: poetry run tox --current-env -e ${{ matrix.target }}
        env:
          PYTEST_ADDOPTS: --junit-xml=test-results.xml

      - name: Check for test results
        id: check_artifacts
        run: |
          if [ -f "test-results.xml" ]; then echo "have_test_results=1" >> $GITHUB_OUTPUT; fi
        if: success() || failure()

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v5
        with:
          report_paths: test-results.xml
          check_name: pytest report (${{ matrix.target }})
          check_annotations: true
          job_summary: true
          detailed_summary: true
          flaky_summary: true
          updateComment: true
          fail_on_failure: false
        if: steps.check_artifacts.outputs.have_test_results == '1' && (success() || failure())

  execute-test:
    runs-on: ubuntu-latest
    needs: [setup-build]
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(needs.setup-build.outputs.tox_test_envs) }}
    services:
      selenium:
        image: ${{ matrix.target == 'test-interactive' && 'selenium/standalone-chrome' || '' }}
        options: --shm-size=2gb

      mysql:
        image: mariadb
        env: { "MARIADB_ALLOW_EMPTY_ROOT_PASSWORD": "1" }
        ports: [3306:3306]

      redis:
        image: mariadb
        ports: [6379:6379]
    continue-on-error: true
    steps:
      - name: Wait for database container
        run: |
          until mysqladmin ping -h 127.0.0.1 -u root --silent;
          do
            sleep 1
          done

      - name: Setup database access
        run: |
          # User specified in config
          mysql -h 127.0.0.1 -u root -e 'CREATE USER `cbng_reviewer`@`%` IDENTIFIED BY ""'

          # Default schema pattern
          mysql -h 127.0.0.1 -u root -e 'GRANT ALL PRIVILEGES ON `test_cbng_reviewer`.* TO `cbng_reviewer`@`%`'
          mysql -h 127.0.0.1 -u root -e 'GRANT ALL PRIVILEGES ON `test_enwiki_p`.* TO `cbng_reviewer`@`%`'

          # Parallel / custom pattern
          mysql -h 127.0.0.1 -u root -e 'GRANT ALL PRIVILEGES ON `test_cbng_reviewer_%`.* TO `cbng_reviewer`@`%`'
          mysql -h 127.0.0.1 -u root -e 'GRANT ALL PRIVILEGES ON `test_enwiki_p_%`.* TO `cbng_reviewer`@`%`'

      - uses: actions/checkout@v5

      - uses: ./.github/actions/setup-python-environment

      - name: Run tox target
        run: poetry run tox --current-env -e test-${{ matrix.target }}
        env:
          PYTEST_ADDOPTS: --junit-xml=test-results.xml

      - name: Check for test results
        id: check_artifacts
        run: |
          if [ -f "test-results.xml" ]; then echo "have_test_results=1" >> $GITHUB_OUTPUT; fi
        if: success() || failure()

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v5
        with:
          report_paths: test-results.xml
          check_name: pytest report (${{ matrix.target }})
          check_annotations: true
          job_summary: true
          detailed_summary: true
          flaky_summary: true
          updateComment: true
          fail_on_failure: false
        if: steps.check_artifacts.outputs.have_test_results == '1' && (success() || failure())

  build-container:
    runs-on: ubuntu-latest
    needs: [setup-build]
    continue-on-error: true
    steps:
      - uses: actions/checkout@v5

      - name: Build container
        run: |
          docker run \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/workspace -w /workspace \
            buildpacksio/pack build \
            --builder heroku/builder:24 \
            ghcr.io/${{ github.repository }}:${{ github.sha }}

      - name: Authenticate to ghcr.io
        run: |
          echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Publish container
        shell: bash
        run: |
          docker push ghcr.io/${{ github.repository }}:${{ github.sha }}
